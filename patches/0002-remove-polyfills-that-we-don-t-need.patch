From d05cc127373e8d47dbe45d5a343172c155af8d2d Mon Sep 17 00:00:00 2001
From: ArjanSchouten <arjan.schouten@solureal.com>
Date: Mon, 19 Jun 2023 22:37:04 +0200
Subject: [PATCH 2/7] remove polyfills that we don't need

---
 axe.d.ts                                      |   1 -
 lib/core/base/audit.js                        |  14 +-
 lib/core/base/rule.js                         | 116 +-----
 lib/core/imports/index.js                     |  27 --
 lib/core/public/run-rules.js                  |   9 -
 lib/core/public/run.js                        |   9 -
 lib/core/utils/index.js                       |   2 -
 lib/core/utils/performance-timer.js           | 126 ------
 lib/core/utils/pollyfills.js                  | 362 ------------------
 test/core/public/run.js                       |   7 -
 .../utils/pollyfills.elements-from-point.js   | 162 --------
 test/integration/rules/runner.js              |   1 -
 12 files changed, 4 insertions(+), 832 deletions(-)
 delete mode 100644 lib/core/utils/performance-timer.js
 delete mode 100644 lib/core/utils/pollyfills.js
 delete mode 100644 test/core/utils/pollyfills.elements-from-point.js

diff --git a/axe.d.ts b/axe.d.ts
index bd8cfc6e..f771cb36 100644
--- a/axe.d.ts
+++ b/axe.d.ts
@@ -128,7 +128,6 @@ declare namespace axe {
     elementRef?: boolean;
     frameWaitTime?: number;
     preload?: boolean;
-    performanceTimer?: boolean;
     pingWaitTime?: number;
   }
   interface AxeResults extends EnvironmentData {
diff --git a/lib/core/base/audit.js b/lib/core/base/audit.js
index 4656be5c..bcaba5d1 100644
--- a/lib/core/base/audit.js
+++ b/lib/core/base/audit.js
@@ -2,14 +2,7 @@ import Rule from './rule';
 import Check from './check';
 import standards from '../../standards';
 import RuleResult from './rule-result';
-import {
-  clone,
-  queue,
-  preload,
-  findBy,
-  ruleShouldRun,
-  performanceTimer
-} from '../utils';
+import { clone, queue, preload, findBy, ruleShouldRun } from '../utils';
 import doT from '@deque/dot';
 import constants from '../constants';
 
@@ -702,11 +695,6 @@ function getRulesToRun(rules, context, options) {
  * @return {Function} a deferrable function for rule
  */
 function getDefferedRule(rule, context, options) {
-  // init performance timer of requested via options
-  if (options.performanceTimer) {
-    performanceTimer.mark('mark_rule_start_' + rule.id);
-  }
-
   return (resolve, reject) => {
     // invoke `rule.run`
     rule.run(
diff --git a/lib/core/base/rule.js b/lib/core/base/rule.js
index 96123ddb..fa2c6915 100644
--- a/lib/core/base/rule.js
+++ b/lib/core/base/rule.js
@@ -2,7 +2,6 @@
 import { createExecutionContext } from './check';
 import RuleResult from './rule-result';
 import {
-  performanceTimer,
   getAllChecks,
   getCheckOption,
   queue,
@@ -12,7 +11,6 @@ import {
 } from '../utils';
 import { isVisibleToScreenReaders } from '../../commons/dom';
 import constants from '../constants';
-import log from '../log';
 
 function Rule(spec, parentAudit) {
   this._audit = parentAudit;
@@ -127,39 +125,12 @@ Rule.prototype.matches = function matches() {
  * @param  {Mixed}   options Options specific to this rule
  * @return {Array}           All matching `HTMLElement`s
  */
-Rule.prototype.gather = function gather(context, options = {}) {
-  const markStart = 'mark_gather_start_' + this.id;
-  const markEnd = 'mark_gather_end_' + this.id;
-  const markHiddenStart = 'mark_isVisibleToScreenReaders_start_' + this.id;
-  const markHiddenEnd = 'mark_isVisibleToScreenReaders_end_' + this.id;
-
-  if (options.performanceTimer) {
-    performanceTimer.mark(markStart);
-  }
-
+Rule.prototype.gather = function gather(context) {
   var elements = select(this.selector, context);
   if (this.excludeHidden) {
-    if (options.performanceTimer) {
-      performanceTimer.mark(markHiddenStart);
-    }
-
     elements = elements.filter(element => {
       return isVisibleToScreenReaders(element);
     });
-
-    if (options.performanceTimer) {
-      performanceTimer.mark(markHiddenEnd);
-      performanceTimer.measure(
-        'rule_' + this.id + '#gather_axe.utils.isVisibleToScreenReaders',
-        markHiddenStart,
-        markHiddenEnd
-      );
-    }
-  }
-
-  if (options.performanceTimer) {
-    performanceTimer.mark(markEnd);
-    performanceTimer.measure('rule_' + this.id + '#gather', markStart, markEnd);
   }
 
   return elements;
@@ -223,10 +194,6 @@ Rule.prototype.runChecksSync = function runChecksSync(
  * @param  {Function} callback Function to call when evaluate is complete; receives a RuleResult instance
  */
 Rule.prototype.run = function run(context, options = {}, resolve, reject) {
-  if (options.performanceTimer) {
-    this._trackPerformance();
-  }
-
   const q = queue();
   const ruleResult = new RuleResult(this);
   let nodes;
@@ -240,10 +207,6 @@ Rule.prototype.run = function run(context, options = {}, resolve, reject) {
     return;
   }
 
-  if (options.performanceTimer) {
-    this._logGatherPerformance(nodes);
-  }
-
   nodes.forEach(node => {
     q.defer((resolveNode, rejectNode) => {
       var checkQueue = queue();
@@ -288,10 +251,6 @@ Rule.prototype.run = function run(context, options = {}, resolve, reject) {
   // See https://github.com/dequelabs/axe-core/pull/1172 for discussion and details.
   q.defer(resolve => setTimeout(resolve, 0));
 
-  if (options.performanceTimer) {
-    this._logRulePerformance();
-  }
-
   q.then(() => resolve(ruleResult)).catch(error => reject(error));
 };
 
@@ -301,10 +260,6 @@ Rule.prototype.run = function run(context, options = {}, resolve, reject) {
  * @param  {Mixed}   options  Options specific to this rule
  */
 Rule.prototype.runSync = function runSync(context, options = {}) {
-  if (options.performanceTimer) {
-    this._trackPerformance();
-  }
-
   const ruleResult = new RuleResult(this);
   let nodes;
 
@@ -315,10 +270,6 @@ Rule.prototype.runSync = function runSync(context, options = {}) {
     throw new SupportError({ cause: error, ruleId: this.id });
   }
 
-  if (options.performanceTimer) {
-    this._logGatherPerformance(nodes);
-  }
-
   nodes.forEach(node => {
     const results = [];
     ['any', 'all', 'none'].forEach(type => {
@@ -349,52 +300,9 @@ Rule.prototype.runSync = function runSync(context, options = {}) {
     }
   });
 
-  if (options.performanceTimer) {
-    this._logRulePerformance();
-  }
-
   return ruleResult;
 };
 
-/**
- * Add performance tracking properties to the rule
- * @private
- */
-Rule.prototype._trackPerformance = function _trackPerformance() {
-  this._markStart = 'mark_rule_start_' + this.id;
-  this._markEnd = 'mark_rule_end_' + this.id;
-  this._markChecksStart = 'mark_runchecks_start_' + this.id;
-  this._markChecksEnd = 'mark_runchecks_end_' + this.id;
-};
-
-/**
- * Log performance of rule.gather
- * @private
- * @param {Rule} rule The rule to log
- * @param {Array} nodes Result of rule.gather
- */
-Rule.prototype._logGatherPerformance = function _logGatherPerformance(nodes) {
-  log('gather (', nodes.length, '):', performanceTimer.timeElapsed() + 'ms');
-  performanceTimer.mark(this._markChecksStart);
-};
-
-/**
- * Log performance of the rule
- * @private
- * @param {Rule} rule The rule to log
- */
-Rule.prototype._logRulePerformance = function _logRulePerformance() {
-  performanceTimer.mark(this._markChecksEnd);
-  performanceTimer.mark(this._markEnd);
-  performanceTimer.measure(
-    'runchecks_' + this.id,
-    this._markChecksStart,
-    this._markChecksEnd
-  );
-
-  performanceTimer.measure('rule_' + this.id, this._markStart, this._markEnd);
-};
-
 /**
  * Process the results of each check and return the result if a check
  * has a result
@@ -434,27 +342,9 @@ Rule.prototype.gatherAndMatchNodes = function gatherAndMatchNodes(
   context,
   options
 ) {
-  const markMatchesStart = 'mark_matches_start_' + this.id;
-  const markMatchesEnd = 'mark_matches_end_' + this.id;
-
-  let nodes = this.gather(context, options);
-
-  if (options.performanceTimer) {
-    performanceTimer.mark(markMatchesStart);
-  }
+  const nodes = this.gather(context, options);
 
-  nodes = nodes.filter(node => this.matches(node.actualNode, node, context));
-
-  if (options.performanceTimer) {
-    performanceTimer.mark(markMatchesEnd);
-    performanceTimer.measure(
-      'rule_' + this.id + '#matches',
-      markMatchesStart,
-      markMatchesEnd
-    );
-  }
-
-  return nodes;
+  return nodes.filter(node => this.matches(node.actualNode, node, context));
 };
 
 /**
diff --git a/lib/core/imports/index.js b/lib/core/imports/index.js
index 39387aa0..61eb86a8 100644
--- a/lib/core/imports/index.js
+++ b/lib/core/imports/index.js
@@ -3,37 +3,10 @@ import doT from '@deque/dot';
 import emojiRegexText from 'emoji-regex';
 import memoize from 'memoizee';
 
-import es6promise from 'es6-promise';
-import { Uint32Array } from 'typedarray';
-import 'weakmap-polyfill';
-
 // prevent striping newline characters from strings (e.g. failure
 // summaries). value must be synced with build/configure.js
 doT.templateSettings.strip = false;
 
-if (!('Promise' in window)) {
-  es6promise.polyfill();
-}
-
-if (!('Uint32Array' in window)) {
-  window.Uint32Array = Uint32Array;
-}
-if (window.Uint32Array) {
-  // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some
-  if (!('some' in window.Uint32Array.prototype)) {
-    Object.defineProperty(window.Uint32Array.prototype, 'some', {
-      value: Array.prototype.some
-    });
-  }
-
-  if (!('reduce' in window.Uint32Array.prototype)) {
-    // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce
-    Object.defineProperty(window.Uint32Array.prototype, 'reduce', {
-      value: Array.prototype.reduce
-    });
-  }
-}
-
 /**
  * Namespace `axe.imports` which holds required external dependencies
  *
diff --git a/lib/core/public/run-rules.js b/lib/core/public/run-rules.js
index 79bd5405..cb6b6e12 100644
--- a/lib/core/public/run-rules.js
+++ b/lib/core/public/run-rules.js
@@ -3,7 +3,6 @@ import teardown from './teardown';
 import {
   getSelectorData,
   queue,
-  performanceTimer,
   collectResultsFromFrames,
   mergeResults,
   publishMetaData,
@@ -32,10 +31,6 @@ function runRules(context, options, resolve, reject) {
   var q = queue();
   var audit = axe._audit;
 
-  if (options.performanceTimer) {
-    performanceTimer.auditStart();
-  }
-
   if (context.frames.length && options.iframes !== false) {
     q.defer((res, rej) => {
       collectResultsFromFrames(context, options, 'rules', null, res, rej);
@@ -46,10 +41,6 @@ function runRules(context, options, resolve, reject) {
   });
   q.then(data => {
     try {
-      if (options.performanceTimer) {
-        performanceTimer.auditEnd();
-      }
-
       // Add wrapper object so that we may use the same "merge" function for results from inside and outside frames
       var results = mergeResults(
         data.map(results => {
diff --git a/lib/core/public/run.js b/lib/core/public/run.js
index b5bdbd40..0f8589e8 100644
--- a/lib/core/public/run.js
+++ b/lib/core/public/run.js
@@ -32,9 +32,6 @@ export default function run(...args) {
   }
 
   axe._running = true;
-  if (options.performanceTimer) {
-    axe.utils.performanceTimer.start();
-  }
 
   function handleRunRules(rawResults, cleanup) {
     const respond = results => {
@@ -47,9 +44,6 @@ export default function run(...args) {
       }
       resolve(results);
     };
-    if (options.performanceTimer) {
-      axe.utils.performanceTimer.end();
-    }
 
     try {
       createReport(rawResults, options, respond);
@@ -62,9 +56,6 @@ export default function run(...args) {
   }
 
   function errorRunRules(err) {
-    if (options.performanceTimer) {
-      axe.utils.performanceTimer.end();
-    }
     axe._running = false;
     resetGlobals();
     callback(err);
diff --git a/lib/core/utils/index.js b/lib/core/utils/index.js
index 8f919d15..19534f63 100644
--- a/lib/core/utils/index.js
+++ b/lib/core/utils/index.js
@@ -60,8 +60,6 @@ export { default as nodeSorter } from './node-sorter';
 export { default as parseCrossOriginStylesheet } from './parse-crossorigin-stylesheet';
 export { default as parseSameOriginStylesheet } from './parse-sameorigin-stylesheet';
 export { default as parseStylesheet } from './parse-stylesheet';
-export { default as performanceTimer } from './performance-timer';
-export { pollyfillElementsFromPoint } from './pollyfills';
 export { default as preloadCssom } from './preload-cssom';
 export { default as preloadMedia } from './preload-media';
 export { default as preload, shouldPreload, getPreloadConfig } from './preload';
diff --git a/lib/core/utils/performance-timer.js b/lib/core/utils/performance-timer.js
deleted file mode 100644
index 78c25f40..00000000
--- a/lib/core/utils/performance-timer.js
+++ /dev/null
@@ -1,126 +0,0 @@
-import log from '../log';
-
-/**
- * Performance measuring utility shimming the User Timing API
- *
- * https://www.html5rocks.com/en/tutorials/webperformance/usertiming/
- * http://caniuse.com/#search=User%20Timing
- *
- */
-const performanceTimer = (() => {
-  /**
-   * Get a time/date object using performance.now() if supported
-   * @return {DOMTimeStamp}
-   */
-  function now() {
-    if (window.performance && window.performance) {
-      return window.performance.now();
-    }
-  }
-  var originalTime = null;
-  var lastRecordedTime = now();
-
-  /**
-   * @typedef {utils.performanceTimer} Public API Methods
-   */
-  return {
-    /**
-     * @member {Function} start Kicks off performance timing for overall axe audit
-     */
-    start() {
-      this.mark('mark_axe_start');
-    },
-    /**
-     * @member {Function} end Concludes performance timing, compares start/end marks
-     */
-    end() {
-      this.mark('mark_axe_end');
-      this.measure('axe', 'mark_axe_start', 'mark_axe_end');
-
-      this.logMeasures('axe');
-    },
-    /**
-     * @member {Function} auditStart Starts an audit for a page or frame
-     */
-    auditStart() {
-      this.mark('mark_audit_start');
-    },
-    /**
-     * @member {Function} auditEnd Ends an audit for a page or frame, logs measurement of start/end marks
-     */
-    auditEnd() {
-      this.mark('mark_audit_end');
-      this.measure('audit_start_to_end', 'mark_audit_start', 'mark_audit_end');
-      // log audit/rule measures
-      this.logMeasures();
-    },
-    /**
-     * @member {Function} mark Shims creating a new named time stamp, called a mark
-     * @param {String} markName String name to record how long it took to get there.
-     * A mark that already exists will be overwritten.
-     *
-     */
-    mark(markName) {
-      if (window.performance && window.performance.mark !== undefined) {
-        window.performance.mark(markName);
-      }
-    },
-    /**
-     * @member {Function} measure Shims creating a measure to compare two marks, which can be logged
-     * @param {String} measureName String name to log what is being compared.
-     * Measures that already exist will be overwritten with a new time stamp.
-     * @param {String} startMark String name of mark to start measuring
-     * @param {String} endMark String name of mark to end measuring
-     */
-    measure(measureName, startMark, endMark) {
-      if (window.performance && window.performance.measure !== undefined) {
-        window.performance.measure(measureName, startMark, endMark);
-      }
-    },
-    /**
-     * @member {Function} logMeasures Iterates through measures and logs any that exist
-     */
-    logMeasures(measureName) {
-      function logMeasure(req) {
-        log('Measure ' + req.name + ' took ' + req.duration + 'ms');
-      }
-      if (
-        window.performance &&
-        window.performance.getEntriesByType !== undefined
-      ) {
-        // only output measures that were started after axe started, otherwise
-        // we get measures made by the page before axe ran (which is confusing)
-        var axeStart = window.performance.getEntriesByName('mark_axe_start')[0];
-        var measures = window.performance
-          .getEntriesByType('measure')
-          .filter(measure => measure.startTime >= axeStart.startTime);
-        for (var i = 0; i < measures.length; ++i) {
-          var req = measures[i];
-          if (req.name === measureName) {
-            logMeasure(req);
-            return;
-          }
-          logMeasure(req);
-        }
-      }
-    },
-    /**
-     * @member {Function} timeElapsed Records time since last audit
-     * @return {DOMTimeStamp}
-     */
-    timeElapsed() {
-      return now() - lastRecordedTime;
-    },
-    /**
-     * @member {Function} reset Resets the time for a new audit
-     */
-    reset() {
-      if (!originalTime) {
-        originalTime = now();
-      }
-      lastRecordedTime = now();
-    }
-  };
-})();
-
-export default performanceTimer;
diff --git a/lib/core/utils/pollyfills.js b/lib/core/utils/pollyfills.js
deleted file mode 100644
index 6829b80d..00000000
--- a/lib/core/utils/pollyfills.js
+++ /dev/null
@@ -1,362 +0,0 @@
-/*
- These polyfills came directly from the ES Specification itself
- Contained within:
-	- Object.assign
-	- Array.prototype.find
-*/
-if (typeof Object.assign !== 'function') {
-  (function () {
-    Object.assign = function (target) {
-      if (target === undefined || target === null) {
-        throw new TypeError('Cannot convert undefined or null to object');
-      }
-
-      var output = Object(target);
-      for (var index = 1; index < arguments.length; index++) {
-        var source = arguments[index];
-        if (source !== undefined && source !== null) {
-          for (var nextKey in source) {
-            if (source.hasOwnProperty(nextKey)) {
-              output[nextKey] = source[nextKey];
-            }
-          }
-        }
-      }
-      return output;
-    };
-  })();
-}
-
-if (!Array.prototype.find) {
-  Object.defineProperty(Array.prototype, 'find', {
-    value: function (predicate) {
-      if (this === null) {
-        throw new TypeError('Array.prototype.find called on null or undefined');
-      }
-      if (typeof predicate !== 'function') {
-        throw new TypeError('predicate must be a function');
-      }
-      var list = Object(this);
-      var length = list.length >>> 0;
-      var thisArg = arguments[1];
-      var value;
-
-      for (var i = 0; i < length; i++) {
-        value = list[i];
-        if (predicate.call(thisArg, value, i, list)) {
-          return value;
-        }
-      }
-      return undefined;
-    }
-  });
-}
-
-if (!Array.prototype.findIndex) {
-  Object.defineProperty(Array.prototype, 'findIndex', {
-    value: function (predicate, thisArg) {
-      if (this === null) {
-        throw new TypeError('Array.prototype.find called on null or undefined');
-      }
-      if (typeof predicate !== 'function') {
-        throw new TypeError('predicate must be a function');
-      }
-      var list = Object(this);
-      var length = list.length >>> 0;
-      var value;
-
-      for (var i = 0; i < length; i++) {
-        value = list[i];
-        if (predicate.call(thisArg, value, i, list)) {
-          return i;
-        }
-      }
-      return -1;
-    }
-  });
-}
-
-// Spelled incorrectly intentionally (backwards compatibility).
-export function pollyfillElementsFromPoint() {
-  if (document.elementsFromPoint) return document.elementsFromPoint;
-  if (document.msElementsFromPoint) return document.msElementsFromPoint;
-
-  var usePointer = (function () {
-    var element = document.createElement('x');
-    element.style.cssText = 'pointer-events:auto';
-    return element.style.pointerEvents === 'auto';
-  })();
-
-  var cssProp = usePointer ? 'pointer-events' : 'visibility';
-  var cssDisableVal = usePointer ? 'none' : 'hidden';
-
-  var style = document.createElement('style');
-  style.innerHTML = usePointer
-    ? '* { pointer-events: all }'
-    : '* { visibility: visible }';
-
-  return function (x, y) {
-    var current, i, d;
-    var elements = [];
-    var previousPointerEvents = [];
-
-    // startup
-    document.head.appendChild(style);
-
-    while (
-      (current = document.elementFromPoint(x, y)) &&
-      elements.indexOf(current) === -1
-    ) {
-      // push the element and its current style
-      elements.push(current);
-
-      previousPointerEvents.push({
-        value: current.style.getPropertyValue(cssProp),
-        priority: current.style.getPropertyPriority(cssProp)
-      });
-
-      // add "pointer-events: none", to get to the underlying element
-      current.style.setProperty(cssProp, cssDisableVal, 'important');
-    }
-
-    // Due to negative index, documentElement could actually not be the last,
-    // so we'll simply move it to the end
-    if (elements.indexOf(document.documentElement) < elements.length - 1) {
-      elements.splice(elements.indexOf(document.documentElement), 1);
-      elements.push(document.documentElement);
-    }
-
-    // restore the previous pointer-events values
-    for (
-      i = previousPointerEvents.length;
-      !!(d = previousPointerEvents[--i]);
-
-    ) {
-      elements[i].style.setProperty(
-        cssProp,
-        d.value ? d.value : '',
-        d.priority
-      );
-    }
-
-    // teardown;
-    document.head.removeChild(style);
-
-    return elements;
-  };
-}
-
-if (typeof window.addEventListener === 'function') {
-  document.elementsFromPoint = pollyfillElementsFromPoint();
-}
-
-if (!Array.prototype.includes) {
-  Object.defineProperty(Array.prototype, 'includes', {
-    value: function (searchElement) {
-      var O = Object(this);
-      var len = parseInt(O.length, 10) || 0;
-      if (len === 0) {
-        return false;
-      }
-      var n = parseInt(arguments[1], 10) || 0;
-      var k;
-      if (n >= 0) {
-        k = n;
-      } else {
-        k = len + n;
-        if (k < 0) {
-          k = 0;
-        }
-      }
-      var currentElement;
-      while (k < len) {
-        currentElement = O[k];
-        if (
-          searchElement === currentElement ||
-          (searchElement !== searchElement && currentElement !== currentElement)
-        ) {
-          // NaN !== NaN
-          return true;
-        }
-        k++;
-      }
-      return false;
-    }
-  });
-}
-
-// Production steps of ECMA-262, Edition 5, 15.4.4.17
-// Reference: http://es5.github.io/#x15.4.4.17
-if (!Array.prototype.some) {
-  Object.defineProperty(Array.prototype, 'some', {
-    value: function (fun) {
-      if (this == null) {
-        throw new TypeError('Array.prototype.some called on null or undefined');
-      }
-
-      if (typeof fun !== 'function') {
-        throw new TypeError();
-      }
-
-      var t = Object(this);
-      var len = t.length >>> 0;
-
-      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
-      for (var i = 0; i < len; i++) {
-        if (i in t && fun.call(thisArg, t[i], i, t)) {
-          return true;
-        }
-      }
-
-      return false;
-    }
-  });
-}
-
-if (!Array.from) {
-  Object.defineProperty(Array, 'from', {
-    value: (function () {
-      var toStr = Object.prototype.toString;
-      var isCallable = function (fn) {
-        return (
-          typeof fn === 'function' || toStr.call(fn) === '[object Function]'
-        );
-      };
-      var toInteger = function (value) {
-        var number = Number(value);
-        if (isNaN(number)) {
-          return 0;
-        }
-        if (number === 0 || !isFinite(number)) {
-          return number;
-        }
-        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
-      };
-      var maxSafeInteger = Math.pow(2, 53) - 1;
-      var toLength = function (value) {
-        var len = toInteger(value);
-        return Math.min(Math.max(len, 0), maxSafeInteger);
-      };
-
-      // The length property of the from method is 1.
-      return function from(arrayLike /*, mapFn, thisArg */) {
-        // 1. Let C be the this value.
-        var C = this;
-
-        // 2. Let items be ToObject(arrayLike).
-        var items = Object(arrayLike);
-
-        // 3. ReturnIfAbrupt(items).
-        if (arrayLike == null) {
-          throw new TypeError(
-            'Array.from requires an array-like object - not null or undefined'
-          );
-        }
-
-        // 4. If mapfn is undefined, then let mapping be false.
-        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
-        var T;
-        if (typeof mapFn !== 'undefined') {
-          // 5. else
-          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
-          if (!isCallable(mapFn)) {
-            throw new TypeError(
-              'Array.from: when provided, the second argument must be a function'
-            );
-          }
-
-          // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
-          if (arguments.length > 2) {
-            T = arguments[2];
-          }
-        }
-
-        // 10. Let lenValue be Get(items, "length").
-        // 11. Let len be ToLength(lenValue).
-        var len = toLength(items.length);
-
-        // 13. If IsConstructor(C) is true, then
-        // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
-        // 14. a. Else, Let A be ArrayCreate(len).
-        var A = isCallable(C) ? Object(new C(len)) : new Array(len);
-
-        // 16. Let k be 0.
-        var k = 0;
-        // 17. Repeat, while k < len… (also steps a - h)
-        var kValue;
-        while (k < len) {
-          kValue = items[k];
-          if (mapFn) {
-            A[k] =
-              typeof T === 'undefined'
-                ? mapFn(kValue, k)
-                : mapFn.call(T, kValue, k);
-          } else {
-            A[k] = kValue;
-          }
-          k += 1;
-        }
-        // 18. Let putStatus be Put(A, "length", len, true).
-        A.length = len;
-        // 20. Return A.
-        return A;
-      };
-    })()
-  });
-}
-
-if (!String.prototype.includes) {
-  String.prototype.includes = function (search, start) {
-    if (typeof start !== 'number') {
-      start = 0;
-    }
-    if (start + search.length > this.length) {
-      return false;
-    } else {
-      return this.indexOf(search, start) !== -1;
-    }
-  };
-}
-
-// @see https://github.com/jonathantneal/array-flat-polyfill/blob/master/src/polyfill-flat.js
-if (!Array.prototype.flat) {
-  Object.defineProperty(Array.prototype, 'flat', {
-    configurable: true,
-    value: function flat() {
-      var depth = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
-
-      return depth
-        ? Array.prototype.reduce.call(
-            this,
-            function (acc, cur) {
-              if (Array.isArray(cur)) {
-                acc.push.apply(acc, flat.call(cur, depth - 1));
-              } else {
-                acc.push(cur);
-              }
-
-              return acc;
-            },
-            []
-          )
-        : Array.prototype.slice.call(this);
-    },
-    writable: true
-  });
-}
-
-// linked from MDN docs on isConnected
-// @see https://gist.github.com/eligrey/f109a6d0bf4efe3461201c3d7b745e8f
-if (window.Node && !('isConnected' in window.Node.prototype)) {
-  Object.defineProperty(window.Node.prototype, 'isConnected', {
-    get() {
-      return (
-        !this.ownerDocument ||
-        !(
-          this.ownerDocument.compareDocumentPosition(this) &
-          this.DOCUMENT_POSITION_DISCONNECTED
-        )
-      );
-    }
-  });
-}
diff --git a/test/core/public/run.js b/test/core/public/run.js
index 39cdd9d4..b00b93e9 100644
--- a/test/core/public/run.js
+++ b/test/core/public/run.js
@@ -73,13 +73,6 @@ describe('axe.run', function () {
     });
   });
 
-  it('works with performance logging enabled', function (done) {
-    axe.run(document, { performanceTimer: true }, function (err, result) {
-      assert.isObject(result);
-      done();
-    });
-  });
-
   describe('identifies context objects', () => {
     it('based on the include property', done => {
       axe._runRules = ctxt => {
diff --git a/test/core/utils/pollyfills.elements-from-point.js b/test/core/utils/pollyfills.elements-from-point.js
deleted file mode 100644
index 3318f18b..00000000
--- a/test/core/utils/pollyfills.elements-from-point.js
+++ /dev/null
@@ -1,162 +0,0 @@
-describe('document.elementsFromPoint pollyfills', function () {
-  'use strict';
-
-  var fixture = document.getElementById('fixture');
-
-  afterEach(function () {
-    document.getElementById('fixture').innerHTML = '';
-  });
-
-  it('ensures document.elementsFromPoint is always there', function () {
-    assert.isFunction(document.elementsFromPoint);
-  });
-
-  it('returns document.elementsFromPoint if it is set', function () {
-    var orig = document.elementsFromPoint;
-    document.elementsFromPoint = function () {
-      return 123;
-    };
-
-    var elmFromPt = axe.utils.pollyfillElementsFromPoint();
-    assert.equal(elmFromPt(), 123);
-    document.elementsFromPoint = orig;
-  });
-
-  it('returns document.msElementsFromPoint if elementsFromPoint is undefined', function () {
-    var orig = document.elementsFromPoint;
-    var msOrig = document.msElementsFromPoint;
-
-    document.elementsFromPoint = undefined;
-    document.msElementsFromPoint = function () {
-      return 123;
-    };
-
-    var elmFromPt = axe.utils.pollyfillElementsFromPoint();
-    assert.equal(elmFromPt(), 123);
-
-    document.elementsFromPoint = orig;
-    document.msElementsFromPoint = msOrig;
-  });
-
-  it('returns the pollyfill no native function is available', function () {
-    var orig = document.elementsFromPoint;
-    var msOrig = document.msElementsFromPoint;
-
-    document.elementsFromPoint = undefined;
-    document.msElementsFromPoint = undefined;
-
-    var elmFromPt = axe.utils.pollyfillElementsFromPoint();
-    assert.isFunction(elmFromPt);
-
-    document.elementsFromPoint = orig;
-    document.msElementsFromPoint = msOrig;
-  });
-
-  describe('pollyfill function', function () {
-    var orig, msOrig;
-    before(function () {
-      orig = document.elementsFromPoint;
-      msOrig = document.msElementsFromPoint;
-
-      document.elementsFromPoint = undefined;
-      document.msElementsFromPoint = undefined;
-
-      document.elementsFromPoint = axe.utils.pollyfillElementsFromPoint();
-    });
-
-    after(function () {
-      document.elementsFromPoint = orig;
-      document.msElementsFromPoint = msOrig;
-    });
-
-    it('should return positioned elements properly', function () {
-      fixture.innerHTML =
-        '<div id="container" style="position: absolute; top: 0px; left: 0px; height: 100px; ' +
-        'width: 90px; background-color: rgba(0, 128, 0, 0.5);">' +
-        '<div id="pos" style="position: absolute; top: 50px; left: 40px; height: 40px; ' +
-        'width: 30px; background-color: rgba(0, 128, 0, 0.5);"></div>' +
-        '<div id="parent" style="position: absolute; top: 0px; left: 0px; height: 40px; ' +
-        'width: 30px; background-color: rgba(0, 128, 0, 0.5);">' +
-        '<div id="target" style="position: absolute; top: 60px; left: 45px; height: 20px; ' +
-        'width: 15px; background-color: rgba(0, 128, 0, 0.5);">' +
-        '</div></div></div>';
-      var target = fixture.querySelector('#target');
-      var pos = fixture.querySelector('#pos');
-      var container = fixture.querySelector('#container');
-
-      target.scrollIntoView();
-      var rect = target.getBoundingClientRect();
-
-      var visualParents = document.elementsFromPoint(
-        Math.ceil(rect.left + 1),
-        Math.ceil(rect.top + 1)
-      );
-      assert.deepEqual(visualParents.slice(0, 3), [target, pos, container]);
-    });
-
-    it('should return inline elements properly', function () {
-      fixture.innerHTML =
-        '<div id="container" style="position: absolute; top: 0px; left: 0px; height: 100px; ' +
-        'width: 90px; background-color: rgba(0, 128, 0, 0.5);">' +
-        '<span id="pos" style="position: absolute; top: 60px; left: 45px;' +
-        'background-color: rgba(0, 128, 0, 0.5);">Text goes here</span>' +
-        '<span id="parent" style="position: absolute; top: 0px; left: 0px;' +
-        'background-color: rgba(0, 128, 0, 0.5);">' +
-        '<span id="target" style="position: absolute; top: 60px; left: 45px;' +
-        'background-color: rgba(0, 128, 0, 0.5);">Text goes here' +
-        '</span></span></div>';
-      var target = fixture.querySelector('#target');
-      var pos = fixture.querySelector('#pos');
-      var container = fixture.querySelector('#container');
-
-      target.scrollIntoView();
-      var rect = target.getBoundingClientRect();
-
-      var visualParents = document.elementsFromPoint(
-        Math.ceil(rect.left + 1),
-        Math.ceil(rect.top + 1)
-      );
-      assert.deepEqual(visualParents.slice(0, 3), [target, pos, container]);
-    });
-
-    it('should return normal flow elements properly', function () {
-      fixture.innerHTML =
-        '<div id="parent" style="background-color: rgba(0, 128, 0, 0.5); height: 40px; width: 30px;">' +
-        '<div id="target" style="background-color: rgba(0, 128, 0, 0.5); height: 20px; width: 15px;">' +
-        '</div></div>';
-      var target = fixture.querySelector('#target');
-      var parent = fixture.querySelector('#parent');
-
-      target.scrollIntoView();
-      var rect = target.getBoundingClientRect();
-
-      var visualParents = document.elementsFromPoint(
-        Math.ceil(rect.left),
-        Math.ceil(rect.top)
-      );
-      assert.deepEqual(visualParents.slice(0, 3), [target, parent, fixture]);
-    });
-
-    it('returns elements with negative z-index after the body', function () {
-      fixture.innerHTML =
-        '<div id="target" style="z-index:-1; position:absolute;">Target!</div>' +
-        '<div id="sibling">Some text</div>';
-      var target = fixture.querySelector('#target');
-
-      target.scrollIntoView();
-      var rect = target.getBoundingClientRect();
-
-      var visualParents = document.elementsFromPoint(
-        Math.ceil(rect.left),
-        Math.ceil(rect.top)
-      );
-
-      // Last two element should be: body, target (due to z-index:-1), html
-      assert.deepEqual(visualParents.slice(-3), [
-        document.body,
-        target,
-        document.documentElement
-      ]);
-    });
-  });
-});
diff --git a/test/integration/rules/runner.js b/test/integration/rules/runner.js
index 134be306..054d1c38 100644
--- a/test/integration/rules/runner.js
+++ b/test/integration/rules/runner.js
@@ -113,7 +113,6 @@
                * when tests fail in webdriver
                */
               debug: true,
-              performanceTimer: false,
               runOnly: { type: 'rule', values: [ruleId] }
             },
             function (err, r) {
-- 
2.37.1 (Apple Git-137.1)

