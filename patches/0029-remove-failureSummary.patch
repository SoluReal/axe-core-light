From e8126397c2858f336c2a4204f7ef6aca7b6d6a16 Mon Sep 17 00:00:00 2001
From: ArjanSchouten <arjan.schouten@solureal.com>
Date: Thu, 7 Sep 2023 09:43:16 +0200
Subject: [PATCH] remove failureSummary

---
 build/configure.js                  | 16 ----------------
 lib/core/base/audit.js              |  8 --------
 lib/core/public/run-virtual-rule.js |  7 -------
 lib/core/reporters/v1.js            | 11 +----------
 test/core/reporters/v1.js           |  8 --------
 5 files changed, 1 insertion(+), 49 deletions(-)

diff --git a/build/configure.js b/build/configure.js
index d499898..23d7781 100644
--- a/build/configure.js
+++ b/build/configure.js
@@ -133,20 +133,6 @@ function buildRules(grunt, options, commons, callback) {
           }
         });
       }
-      //TODO this is actually failureSummaries, property name should better reflect that
-      if (result.failureMessage && doTRegex.test(result.failureMessage)) {
-        result.failureMessage = doT.template(result.failureMessage).toString();
-      }
-      return result;
-    }
-
-    function createFailureSummaryObject(summaries) {
-      var result = {};
-      summaries.forEach(function (summary) {
-        if (summary.type) {
-          result[summary.type] = parseMetaData(summary, 'failureSummaries');
-        }
-      });
       return result;
     }
 
@@ -407,8 +393,6 @@ ${
 ${TOC}
 ${ruleTables}`;
 
-    // Translate failureSummaries
-    metadata.failureSummaries = createFailureSummaryObject(build.misc);
     metadata.incompleteFallbackMessage = getIncompleteMsg(build.misc);
 
     callback({
diff --git a/lib/core/base/audit.js b/lib/core/base/audit.js
index 09f8891..fee213e 100644
--- a/lib/core/base/audit.js
+++ b/lib/core/base/audit.js
@@ -43,7 +43,6 @@ export default class Audit {
     const locale = {
       checks: {},
       rules: {},
-      failureSummaries: {},
       incompleteFallbackMessage: '',
       lang: this.lang
     };
@@ -67,13 +66,6 @@ export default class Audit {
       const { description, help } = rule;
       locale.rules[id] = { description, help };
     }
-    const failureSummaries = Object.keys(this.data.failureSummaries);
-    for (let i = 0; i < failureSummaries.length; i++) {
-      const type = failureSummaries[i];
-      const failureSummary = this.data.failureSummaries[type];
-      const { failureMessage } = failureSummary;
-      locale.failureSummaries[type] = { failureMessage };
-    }
     locale.incompleteFallbackMessage = this.data.incompleteFallbackMessage;
     this._defaultLocale = locale;
   }
diff --git a/lib/core/public/run-virtual-rule.js b/lib/core/public/run-virtual-rule.js
index 189720f..d2ece29 100644
--- a/lib/core/public/run-virtual-rule.js
+++ b/lib/core/public/run-virtual-rule.js
@@ -1,6 +1,5 @@
 import SerialVirtualNode from '../base/virtual-node/serial-virtual-node';
 import AbstractVirtualNode from '../base/virtual-node/abstract-virtual-node';
-import * as helpers from '../reporters/helpers';
 import {
   publishMetaData,
   finalizeRuleResult,
@@ -53,12 +52,6 @@ export default function runVirtualRule(ruleId, vNode, options = {}) {
   finalizeRuleResult(rawResults);
   const results = aggregateResult([rawResults]);
 
-  results.violations.forEach(result =>
-    result.nodes.forEach(nodeResult => {
-      nodeResult.failureSummary = helpers.failureSummary(nodeResult);
-    })
-  );
-
   return {
     ...getEnvironmentData(),
     ...results,
diff --git a/lib/core/reporters/v1.js b/lib/core/reporters/v1.js
index 10d939c..15a3783 100644
--- a/lib/core/reporters/v1.js
+++ b/lib/core/reporters/v1.js
@@ -1,4 +1,4 @@
-import { processAggregate, failureSummary } from './helpers';
+import { processAggregate } from './helpers';
 import { getEnvironmentData } from '../utils';
 
 const v1Reporter = (results, options, callback) => {
@@ -9,15 +9,6 @@ const v1Reporter = (results, options, callback) => {
   const { environmentData, ...toolOptions } = options;
   const out = processAggregate(results, options);
 
-  const addFailureSummaries = result => {
-    result.nodes.forEach(nodeResult => {
-      nodeResult.failureSummary = failureSummary(nodeResult);
-    });
-  };
-
-  out.incomplete.forEach(addFailureSummaries);
-  out.violations.forEach(addFailureSummaries);
-
   callback({
     ...getEnvironmentData(environmentData),
     toolOptions,
diff --git a/test/core/reporters/v1.js b/test/core/reporters/v1.js
index ccded89..c426951 100644
--- a/test/core/reporters/v1.js
+++ b/test/core/reporters/v1.js
@@ -229,14 +229,6 @@ describe('reporters - v1', function () {
     axe.getReporter('v1')(runResults, {}, function (results) {
       assert.ok(results.violations[0].nodes);
       assert.equal(results.violations[0].nodes.length, 1);
-      assert.equal(
-        typeof results.violations[0].nodes[0].failureSummary,
-        'string'
-      );
-      assert.equal(
-        typeof results.incomplete[0].nodes[0].failureSummary,
-        'string'
-      );
     });
   });
   it('should add the target selector array to the node data', function () {
-- 
2.39.2 (Apple Git-143)

